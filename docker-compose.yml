version: '3.5'

services:
  app-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgis:5432/${POSTGRES_DB:-db_geonews}
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: smtp4dev
      EMAIL_PORT: 25
      EMAIL_USE_TLS: False
      EMAIL_HOST_USER: admin@localhost.com
      EMAIL_HOST_PASSWORD: password
    depends_on:
      - postgis
      - redis
      - smtp4dev
    command: >
      sh -c "
        python manage.py migrate && 
        python create_admin.py &&
        python manage.py runserver 0.0.0.0:8000"

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
      postgis:
        condition: service_healthy
      app-api:
        condition: service_started
      celery-worker:
        condition: service_started
      smtp4dev:
        condition: service_started
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgis:5432/${POSTGRES_DB:-db_geonews}
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: smtp4dev
      EMAIL_PORT: 25
      EMAIL_USE_TLS: False
      EMAIL_HOST_USER: admin@localhost.com
      EMAIL_HOST_PASSWORD: password
    command: >
      sh -c "celery -A config beat --loglevel=info"

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
      postgis:
        condition: service_healthy
      smtp4dev:
        condition: service_started
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgis:5432/${POSTGRES_DB:-db_geonews}
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: smtp4dev
      EMAIL_PORT: 25
      EMAIL_USE_TLS: False
      EMAIL_HOST_USER: admin@localhost.com
      EMAIL_HOST_PASSWORD: password
    command: >
      sh -c "celery -A config worker --loglevel=info"

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgis
      - smtp4dev
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgis:5432/${POSTGRES_DB:-db_geonews}
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: smtp4dev
      EMAIL_PORT: 25
      EMAIL_USE_TLS: False
      EMAIL_HOST_USER: admin@localhost.com
      EMAIL_HOST_PASSWORD: password
    ports:
      - "5555:5555"
    command: >
      sh -c "celery -A config flower --port=5555 --broker=redis://redis:6379/0"

  postgis:
    image: postgis/postgis:15-3.3
    container_name: postgis
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db_geonews}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-db_geonews}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-""}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  smtp4dev:
    image: rnwood/smtp4dev
    container_name: smtp4dev
    restart: always
    ports:
      - "2525:2525"  # SMTP server (matches Django config)
      - "8025:80"    # Web interface
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Logging:LogLevel:Default=Debug

volumes:
  postgres_data:
  redis_data:
